dnl	This file is an input file used by the GNU "autoconf" program to
dnl	generate the file "configure", which is run during installation
dnl	to configure the system for the local environment.
AC_INIT(msqltcl.c)

#----------------------------------------------------------------------------
#       Check if we should use gcc if available on this machine.
#----------------------------------------------------------------------------

AC_ARG_ENABLE(gcc, [  --enable-gcc            allow use of gcc if available],
    [tk_ok=$enableval], [tkl_ok=no])
if test "$tk_ok" = "yes"; then
    AC_PROG_CC
else
    CC=${CC-cc}
AC_SUBST(CC)
fi
AC_C_CROSS

AC_PROG_INSTALL
AC_PREFIX_PROGRAM(tclsh)

#----------------------------------------------------------------------------
#       Check for msql include and library files.
#----------------------------------------------------------------------------

AC_ARG_WITH(msql-include,
	[  --with-msql-include=DIR set the msql include directory],
	msql_include=$withval, msql_include="/usr/local/include")
AC_ARG_WITH(msql-library,
	[  --with-msql-library=DIR set the msql library directory],
	msql_library=$withval, msql_library="/usr/local/lib")
MSQL_INC="-I$msql_include"
MSQL_LIBS="-L$msql_library -lmsql"
AC_SUBST(MSQL_INC)
AC_SUBST(MSQL_LIBS)

#----------------------------------------------------------------------------
#	Load the tcl configuration file.
#----------------------------------------------------------------------------

AC_PATH_PROG(tclsh,tclsh)
if test -n "$tclsh" ; then
    tclsh_prefix=`dirname $tclsh`
    tclsh_prefix=`dirname $tclsh_prefix`
fi

AC_ARG_WITH(tcl-config,
        [  --with-tcl-config=DIR   path to the tcl configuration file],
        tnm_path_tcl_config=$withval)

dirs="$tnm_path_tcl_config $prefix/lib $tclsh_prefix/lib /usr/local/lib"

found=0
for f in $dirs ; do
    AC_MSG_CHECKING(for tclConfig.sh in $f)
    if test -f "$f/tclConfig.sh" ; then
	tnm_cv_path_tcl_config=$f
	found=1
        AC_MSG_RESULT(yes)	
	break
    else
        AC_MSG_RESULT(no)
    fi
done

if test "$found" -eq 0 ; then
    AC_MSG_ERROR([tclConfig.sh not found - use the --with-tcl-config option])
fi

. $tnm_cv_path_tcl_config/tclConfig.sh
SHLIB_CFLAGS=$TCL_SHLIB_CFLAGS
SHLIB_LD=$TCL_SHLIB_LD
SHLIB_SUFFIX=$TCL_SHLIB_SUFFIX
DL_LIBS=$TCL_DL_LIBS
LD_FLAGS=$TCL_LD_FLAGS
TCL_INCLUDES=-I$TCL_PREFIX/include

if test -z "$SHLIB_LD" ; then
    AC_MSG_ERROR([no shared linker definition (TCL_SHLIB_LD) in tclConfig.sh])
fi

AC_MSG_CHECKING(for tcl version)
AC_MSG_RESULT("$TCL_VERSION")
if test 7 -gt $TCL_MAJOR_VERSION ; then
    AC_MSG_ERROR("tcl 7.5 or later needed")
fi
if test 7 -eq $TCL_MAJOR_VERSION ; then
    if test 5 -gt $TCL_MINOR_VERSION ; then
        AC_MSG_ERROR("tcl 7.5 or later needed")
    fo
fi

#----------------------------------------------------------------------------
#	Load the tk configuration file.
#----------------------------------------------------------------------------

AC_PATH_PROG(wish,wish)
if test -n "$wish" ; then
    wish_prefix=`dirname $wish`
    wish_prefix=`dirname $wish_prefix`
fi

AC_ARG_WITH(tk-config,
        [  --with-tk-config=DIR    path to the tk configuration file],
        tnm_path_tk_config=$withval)

dirs="$tnm_path_tk_config $prefix/lib $wish_prefix/lib /usr/local/lib"

found=0
for f in $dirs ; do
    AC_MSG_CHECKING(for tkConfig.sh in $f)
    if test -f "$f/tkConfig.sh" ; then
	tnm_cv_path_tk_config=$f
	found=1
        AC_MSG_RESULT(yes)	
	break
    else
        AC_MSG_RESULT(no)
    fi
done

if test "$found" -eq 0 ; then
    AC_MSG_ERROR("tkConfig.sh not found - use the --with-tk-config option")
fi

. $tnm_cv_path_tk_config/tkConfig.sh
TK_INCLUDES=-I$TK_PREFIX/include
if test "$TK_INCLUDES" = "$TCL_INCLUDES" ; then
    TK_INCLUDES=""
fi

AC_MSG_CHECKING(for tk version)
AC_MSG_RESULT("$TK_VERSION")
if test 4 -gt $TK_MAJOR_VERSION ; then
    AC_MSG_ERROR("tk 4.1 or later needed")
fi
if test 4 -eq $TK_MAJOR_VERSION ; then
    if test 1 -gt $TK_MINOR_VERSION ; then
        AC_MSG_ERROR("tk 4.1 or later needed")
    fi
fi

#----------------------------------------------------------------------------
#	Check if we should build a dynamic loadable library.
#----------------------------------------------------------------------------

AC_ARG_ENABLE(shared, [  --enable-shared           enable dynamic loading],
	[sharedok=yes], [sharedok=$enableval])
if test "$sharedok" = "yes" ; then
    SHLIB_TARGET=msqltcl$SHLIB_SUFFIX
else
    SHLIB_TARGET=""
fi

#----------------------------------------------------------------------------
#	Symbols to substitute.
#----------------------------------------------------------------------------

AC_SUBST(SHLIB_CFLAGS)
AC_SUBST(SHLIB_LD)
AC_SUBST(SHLIB_SUFFIX)
AC_SUBST(SHLIB_TARGET)
AC_SUBST(DL_LIBS)
AC_SUBST(LD_FLAGS)
AC_SUBST(LIBS)

AC_SUBST(TCL_INCLUDES)
AC_SUBST(TCL_LIB_SPEC)
AC_SUBST(TCL_VERSION)
AC_SUBST(TK_INCLUDES)
AC_SUBST(TK_LIB_SPEC)
AC_SUBST(TK_XINCLUDES)
AC_SUBST(TK_XLIBSW)

AC_OUTPUT(Makefile)
